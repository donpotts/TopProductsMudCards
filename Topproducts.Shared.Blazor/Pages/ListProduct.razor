@page "/product"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@attribute [Authorize]

<PageTitle>Product</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Product</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
</MudStack>

@if (ProductResult != null)
{
    <MudText Class="mt-6 mb-3" Typo="Typo.h5">Cards</MudText>
    <MudGrid Class="mb-3">
        @foreach (var Product in ProductResult.Value ?? Enumerable.Empty<Product>())
        {
            var thisProduct = Product;
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="d-flex flex-column mud-height-full">
                    <MudCardContent>
                        @if (!string.IsNullOrEmpty(Product.Photo))
                        {
                            <MudCardMedia Image="@Product.Photo" Height="200" />
                        }
                        else
                        {
                            <div class="mud-theme-primary d-flex align-center justify-center mud-width-full" style="border-top-left-radius: inherit; border-top-right-radius: inherit; height: 200px;">
                                <MudIcon Icon="@Icons.Material.Outlined.BrokenImage" Size="Size.Large" />
                            </div>
                        } 
                        <MudText Typo="Typo.h5" Class="mb-3"><strong>Name:</strong> @Product.Name</MudText>
                        <MudText Typo="Typo.body2" Class="mb-2"><strong>Description:</strong> @Product.Description</MudText>
                        <MudText Typo="Typo.body2"><strong>Price:</strong> @Product.Price</MudText>
                        <MudText Typo="Typo.body2"><strong>Rating:</strong> @Product.Rating</MudText>
                        @* <MudText Typo="Typo.body2"><strong>Id:</strong> @Product.Id</MudText> *@
                        <MudText Typo="Typo.body2" Class="mb-2"><strong>Vendor:</strong> @Product.Vendor?.Company</MudText>
                    </MudCardContent>
                    <MudCardActions Class="mt-auto">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(e => OnEdit(thisProduct))">Edit</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(e => OnDelete(thisProduct))">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <div class="d-flex align-center justify-center mb-3">
        <MudPagination Color="Color.Primary" Count="pageCount" Selected="selectedPage" SelectedChanged="OnSelectedChangedAsync" />
    </div>
}

@code {
    private const int PageSize = 10;
    private AppService.ODataResult<Product>? ProductResult;
    private int pageCount = 1;
    private int selectedPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
    }

    private async Task OnSelectedChangedAsync(int selected)
    {
        selectedPage = selected;
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        var skip = (selectedPage - 1) * PageSize;

        ProductResult = await AppService.ListProductODataAsync(PageSize, skip, "Name ASC", "", count: true, "Vendor");

        if (ProductResult?.Count.HasValue ?? false)
        {
            pageCount = (int)Math.Ceiling((double)ProductResult.Count.Value / PageSize);
        }
        else
        {
            pageCount = 1;
        }
        StateHasChanged();
    }
     
    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddProduct>("Add Product", dialogOptions).Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async void OnEdit(Product record)
    {
        DialogParameters<UpdateProduct> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateProduct>("Update Product", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async void OnDelete(Product record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteProductAsync(record.Id!.Value);
                await ReloadDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
}
